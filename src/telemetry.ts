/**
 * Arquivo de inicializa√ß√£o autom√°tica do OpenTelemetry
 * Este arquivo √© importado diretamente no main.ts das aplica√ß√µes
 * 
 * Configura√ß√µes via vari√°veis de ambiente:
 * - MONITORIA_SERVICE_NAME: Nome do servi√ßo (obrigat√≥rio)
 * - MONITORIA_SERVICE_VERSION: Vers√£o do servi√ßo (padr√£o: 1.0.0)
 * - MONITORIA_ENVIRONMENT: Ambiente (padr√£o: development)
 * - MONITORIA_COLLECTOR_ENDPOINT: Endpoint do collector (obrigat√≥rio)
 * - MONITORIA_ENABLE_TRACING: Habilitar tracing (padr√£o: true)
 * - MONITORIA_ENABLE_METRICS: Habilitar m√©tricas (padr√£o: true)
 */

import { NodeSDK } from '@opentelemetry/sdk-node';
import { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';
import { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';
import { OTLPMetricExporter } from '@opentelemetry/exporter-metrics-otlp-http';
import { PeriodicExportingMetricReader } from '@opentelemetry/sdk-metrics';

let sdk: NodeSDK | undefined;

/**
 * Inicializa o OpenTelemetry SDK usando configura√ß√µes de ambiente
 */
function initializeTelemetry(): void {
  if (sdk) {
    console.log('‚ö†Ô∏è OpenTelemetry SDK j√° est√° inicializado. Ignorando nova inicializa√ß√£o.');
    return;
  }

  try {
    // Carregar configura√ß√µes das vari√°veis de ambiente
    const serviceName = process.env.MONITORIA_SERVICE_NAME || 'unknown-service';
    const serviceVersion = process.env.MONITORIA_SERVICE_VERSION || '1.0.0';
    const environment = process.env.MONITORIA_ENVIRONMENT || 'local';
    const collectorEndpoint = process.env.MONITORIA_COLLECTOR_ENDPOINT || 'http://localhost:4318';
    const enableTracing = process.env.MONITORIA_ENABLE_TRACING !== 'false';
    const enableMetrics = process.env.MONITORIA_ENABLE_METRICS !== 'false';

    // Validar configura√ß√µes obrigat√≥rias
    if (serviceName === 'unknown-service') {
      console.error('‚ùå MONITORIA_SERVICE_NAME √© obrigat√≥rio');
      return;
    }

    if (!collectorEndpoint) {
      console.error('‚ùå MONITORIA_COLLECTOR_ENDPOINT √© obrigat√≥rio');
      return;
    }

    // Exibir configura√ß√µes carregadas
    console.log('üîß Configura√ß√µes Monitoria SDK:');
    console.log(`   üìä Service: ${serviceName}@${serviceVersion}`);
    console.log(`   üåç Environment: ${environment}`);
    console.log(`   üîó Collector: ${collectorEndpoint}`);
    console.log(`   üîç Tracing: ${enableTracing ? '‚úÖ' : '‚ùå'}`);
    console.log(`   üìà Metrics: ${enableMetrics ? '‚úÖ' : '‚ùå'}`);

    // Configurar vari√°veis de ambiente do OpenTelemetry
    process.env.OTEL_SERVICE_NAME = serviceName;
    process.env.OTEL_SERVICE_VERSION = serviceVersion;
    process.env.OTEL_DEPLOYMENT_ENVIRONMENT = environment;

    // Configura√ß√£o do SDK - SIMPLIFICADA (igual ao api-todolist)
    const sdkConfig: any = {
      // Configurar traces
      traceExporter: new OTLPTraceExporter({
        url: `${collectorEndpoint}/v1/traces`,
      }),
      
      // Configurar m√©tricas
      metricReader: new PeriodicExportingMetricReader({
        exporter: new OTLPMetricExporter({
          url: `${collectorEndpoint}/v1/metrics`,
        }),
        exportIntervalMillis: 10000, // 10 segundos
      }),
      
      // Instrumenta√ß√µes autom√°ticas - configura√ß√£o m√≠nima
      instrumentations: [
        getNodeAutoInstrumentations({
          '@opentelemetry/instrumentation-http': {
            enabled: true,
          },
          '@opentelemetry/instrumentation-express': {
            enabled: true,
          },
          '@opentelemetry/instrumentation-fs': {
            enabled: false,
          },
          '@opentelemetry/instrumentation-net': {
            enabled: false,
          },
          '@opentelemetry/instrumentation-dns': {
            enabled: false,
          },
        }),
      ],
    };
    
    sdk = new NodeSDK(sdkConfig);
    sdk.start();
    
  } catch (error: any) {
    console.error('‚ùå Erro ao inicializar OpenTelemetry SDK:', error);
    // N√£o quebra a aplica√ß√£o, apenas ignora a telemetria
  }
}

// Inicializar automaticamente quando o m√≥dulo for importado
initializeTelemetry();

// Exportar para compatibilidade
export { sdk };
