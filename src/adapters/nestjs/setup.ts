import { LoggingInterceptor } from './logging.interceptor';
import { LoggerConfig } from '../../types';

/**
 * Configura o logging para aplica√ß√µes NestJS
 * Usa APENAS configura√ß√µes de ambiente MONITORIA_*
 * 
 * @param app - Inst√¢ncia da aplica√ß√£o NestJS
 * @param config - Configura√ß√£o opcional para sobrescrever ENV vars (apenas serviceName e enableConsole)
 */
export function setupLogging(app: any, config: LoggerConfig = {}): void {
  try {
   
    // Valida√ß√£o b√°sica do app
    if (!app || typeof app.useGlobalInterceptors !== 'function') {
      console.log('‚ùå App inv√°lido ou sem useGlobalInterceptors');
      return;
    }

    // Carregar configura√ß√µes das vari√°veis de ambiente
    const serviceName = process.env.MONITORIA_SERVICE_NAME || 'unknown-service';
    const serviceVersion = process.env.MONITORIA_SERVICE_VERSION || '1.0.0';
    const environment = process.env.MONITORIA_ENVIRONMENT || 'development';
    const collectorEndpoint = process.env.MONITORIA_COLLECTOR_ENDPOINT || 'http://localhost:4318';
    const logLevel = process.env.MONITORIA_LOG_LEVEL || 'info';
    const enableConsole = process.env.MONITORIA_ENABLE_CONSOLE !== 'false';
    const enableTracing = process.env.MONITORIA_ENABLE_TRACING !== 'false';
    const enableLogs = process.env.MONITORIA_ENABLE_LOGS !== 'false';
    const enableMetrics = process.env.MONITORIA_ENABLE_METRICS !== 'false';

    // Apenas sobrescrever se fornecido no config
    const finalConfig = {
      serviceName: config.serviceName || serviceName,
      serviceVersion,
      environment,
      collectorEndpoint,
      logLevel,
      enableConsole: config.enableConsole !== undefined ? config.enableConsole : enableConsole,
      enableTracing,
      enableLogs,
      enableMetrics,
    };

    console.log('‚úÖ Configura√ß√£o v√°lida, registrando interceptor');
    console.log(`üìä Service: ${finalConfig.serviceName}@${finalConfig.serviceVersion}`);
    console.log(`üîó Collector: ${finalConfig.collectorEndpoint}`);
    console.log(`üåç Environment: ${finalConfig.environment}`);
    console.log(`üñ•Ô∏è Console: ${finalConfig.enableConsole}`);
    console.log(`üìù Logs: ${finalConfig.enableLogs}`);
    console.log(`üîç Tracing: ${finalConfig.enableTracing}`);
    console.log(`üìà Metrics: ${finalConfig.enableMetrics}`);
    
    // Registrar interceptor globalmente
    const interceptor = new LoggingInterceptor(finalConfig);
    app.useGlobalInterceptors(interceptor);
    
    console.log('‚úÖ Interceptor de logging registrado com sucesso');
  } catch (error) {
    console.log('‚ùå Erro ao configurar logging:', error);
    // N√£o quebra a aplica√ß√£o, apenas ignora o logging
  }
}